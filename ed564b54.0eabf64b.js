(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{159:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(9),c=(a(0),a(164)),b={id:"cis-benchmark",title:"CIS Benchmark"},i={id:"cis-benchmark",title:"CIS Benchmark",description:"| ID | Description | URL |",source:"@site/docs/cis-benchmark.md",permalink:"/docs/cis-benchmark",editUrl:"https://github.com/raspbernetes/docs/edit/master/website/docs/cis-benchmark.md",sidebar:"someSidebar",previous:{title:"Architecture",permalink:"/docs/architecture"}},s=[],o={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"ID"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"URL"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"01"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enforcing CPU limits prevents DOS via resource exhaustion"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-resources-limits-cpu/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"02"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enforcing memory limits prevents DOS via resource exhaustion"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-resources-limits-memory"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"03"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CAP_SYS_ADMIN is the most privileged capability and should always be avoided"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-capabilities-add-index-sys-admin/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"04"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Drop all capabilities and add only those required to reduce syscall attack surface"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-capabilities-drop-index-all/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"05"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Privileged containers can allow almost completely unrestricted host access"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-privileged-true/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"06"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An immutable root filesystem can prevent malicious binaries being added to PATH and increase attack cost"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-readonlyrootfilesystem-true/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"07"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Force the running image to run as a non-root user to ensure least privilege"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-runasnonroot-true/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"08"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Run as a high-UID user to avoid conflicts with the host\u2019s user table"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/containers-securitycontext-runasuser/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"09"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Managing /etc/hosts aliases can prevent Docker from modifying the file after a pod\u2019s containers have already been started"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/spec-hostaliases/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"10"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sharing the host\u2019s IPC namespace allows container processes to communicate with processes on the host"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/spec-hostipc/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"11"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sharing the host\u2019s network namespace permits processes in the pod to communicate with processes bound to the host\u2019s loopback adapter"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/spec-hostnetwork/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"12"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sharing the host\u2019s PID namespace allows visibility of processes on the host, potentially leaking information such as environment variables and configuration"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/spec-hostpid/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"13"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Mounting the docker.socket leaks information about other containers and can allow container breakout"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubesec.io/basics/spec-volumes-hostpath-path-var-run-docker-sock/"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"14"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Avoid using the :latest tag when deploying containers in production as it is harder to track which version of the image is running and more difficult to roll back properly."),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubernetes.io/docs/concepts/configuration/overview/#container-images"}),"Link"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"15"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Disabling allowPrivilegeEscalation to false ensures that no child process of a container can gain more privileges than its parent."),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation"}),"Link"))))))}p.isMDXComponent=!0}}]);